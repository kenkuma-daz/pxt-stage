<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="4d!8k5Mr3B8O_=_!J{9t" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="vvgtOm)1AMVDYH|[zb]e" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace stage {" line1="" line2="    //% block=&quot;foreach $aSprite of $tileImages in tilemap $tilemap&quot;" line3="    //% tilemap.fieldEditor=&quot;tilemap&quot;" line4="    //% tilemap.fieldOptions.decompileArgumentAsString=&quot;true&quot;" line5="    //% tilemap.fieldOptions.filter=&quot;tile&quot;" line6="    //% tilemap.fieldOptions.taggedTemplate=&quot;tilemap&quot;" line7="    //% tileImages.shadow=&quot;lists_create_with&quot;" line8="    //% draggableParameters" line9="    //% handlerStatement" line10="    export function setSpriteInTilemap(tilemap: tiles.TileMapData, tileImages: Image[], handler: (aSprite: Sprite) =&gt; void) {" line11="        scene.setTileMapLevel(tilemap);" line12="        for (let tileImage of tileImages) {" line13="            for (let tileLocation of tiles.getTilesByType(tileImage)) {" line14="                tiles.setTileAt(tileLocation, image.create(16, 16));" line15="                let _sprite = sprites.create(tileImage, SpriteKind.Enemy);" line16="                tiles.placeOnTile(_sprite, tileLocation);" line17="                handler(_sprite);" line18="            }" line19="        }" line20="    }    " line21="}" numlines="22"></mutation></block></statement></block></xml>